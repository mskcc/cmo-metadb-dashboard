query RequestsList($options: RequestOptions, $where: RequestWhere) {
  requestsConnection(where: $where) {
    totalCount
  }
  requests(where: $where, options: $options) {
    ...RequestParts
    importDate
    totalSampleCount
    hasMetadataRequestMetadata {
      importDate
    }
    hasSampleSamplesConnection {
      totalCount
    }
  }
}

query PatientsList($options: PatientOptions, $where: PatientWhere) {
  patientsConnection(where: $where) {
    totalCount
  }
  patients(where: $where, options: $options) {
    smilePatientId
    cmoPatientId
    dmpPatientId
    totalSampleCount
    cmoSampleIds
    consentPartA
    consentPartC
    hasSampleSamples {
      smileSampleId
      hasMetadataSampleMetadata {
        primaryId
        cmoSampleName
        additionalProperties
        cmoPatientId
      }
    }
    hasSampleSamplesConnection {
      totalCount
    }
    patientAliasesIsAlias {
      namespace
      value
    }
  }
}

query DashboardSamples($searchVals: [String]) {
  dashboardSampleCount(searchVals: $searchVals) {
    totalCount
  }
  dashboardSamples(searchVals: $searchVals) {
    ...DashboardSampleParts
    ...DashboardSampleMetadataParts
    ...DashboardTempoParts
  }
}

fragment DashboardSampleParts on DashboardSample {
  # (s:Sample)
  smileSampleId
  revisable
}

fragment DashboardSampleMetadataParts on DashboardSample {
  # (s:Sample)-[:HAS_METADATA]->(sm:SampleMetadata)
  ## Root-level fields
  primaryId
  cmoSampleName
  importDate
  cmoPatientId
  investigatorSampleId
  sampleType
  species
  genePanel
  baitSet
  preservation
  tumorOrNormal
  sampleClass
  oncotreeCode
  collectionYear
  sampleOrigin
  tissueLocation
  sex
  ## Custom fields
  recipe
  dmpPatientId
  ## (sm:SampleMetadata)-[:HAS_STATUS]->(s:Status)
  validationReport
  validationStatus

  # Oncotree API
  cancerType
  cancerTypeDetailed
}

fragment DashboardTempoParts on DashboardSample {
  # (s:Sample)-[:HAS_TEMPO]->(t:Tempo)
  ## Root-level fields
  billed
  costCenter
  billedBy
  custodianInformation
  accessLevel
  ## Custom fields
  initialPipelineRunDate
  embargoDate
  ## (t:Tempo)-[:HAS_EVENT]->(bc:BamComplete)
  bamCompleteDate
  bamCompleteStatus
  ## (t:Tempo)-[:HAS_EVENT]->(mc:MafComplete)
  mafCompleteDate
  mafCompleteNormalPrimaryId
  mafCompleteStatus
  ## (t:Tempo)-[:HAS_EVENT]->(qc:QcComplete)
  qcCompleteDate
  qcCompleteResult
  qcCompleteReason
  qcCompleteStatus
}

fragment RequestParts on Request {
  igoRequestId
  igoProjectId
  genePanel
  dataAnalystName
  dataAnalystEmail
  dataAccessEmails
  bicAnalysis
  investigatorEmail
  investigatorName
  isCmoRequest
  labHeadEmail
  labHeadName
  libraryType
  otherContactEmails
  piEmail
  projectManagerName
  qcAccessEmails
  smileRequestId
}

fragment SampleParts on Sample {
  datasource
  revisable
  sampleCategory
  sampleClass
  smileSampleId
}

fragment SampleMetadataParts on SampleMetadata {
  additionalProperties
  baitSet
  cfDNA2dBarcode
  cmoInfoIgoId
  cmoPatientId
  cmoSampleIdFields
  cmoSampleName
  collectionYear
  genePanel
  igoComplete
  igoRequestId
  importDate
  investigatorSampleId
  libraries
  oncotreeCode
  preservation
  primaryId
  qcReports
  sampleClass
  sampleName
  sampleOrigin
  sampleType
  sex
  species
  tissueLocation
  tubeId
  tumorOrNormal
}

fragment TempoParts on Tempo {
  smileTempoId
  billed
  billedBy
  costCenter
  custodianInformation
  accessLevel
}

query Samples(
  $where: SampleWhere
  $hasMetadataSampleMetadataWhere2: SampleMetadataWhere
  $hasMetadataSampleMetadataOptions2: SampleMetadataOptions
) {
  samples(where: $where) {
    smileSampleId
    revisable
    sampleCategory
    sampleClass
    datasource
    hasMetadataSampleMetadata(
      where: $hasMetadataSampleMetadataWhere2
      options: $hasMetadataSampleMetadataOptions2
    ) {
      ...SampleMetadataParts
    }
    hasTempoTempos {
      ...TempoParts
    }
  }
}

mutation UpdateSamples(
  $where: SampleWhere
  $update: SampleUpdateInput
  $connect: SampleConnectInput
) {
  updateSamples(where: $where, update: $update, connect: $connect) {
    samples {
      smileSampleId
      revisable
      datasource
      sampleCategory
      sampleClass
      hasMetadataSampleMetadata {
        ...SampleMetadataParts
      }
      hasTempoTempos {
        ...TempoParts
      }
    }
  }
}

query GetPatientIdsTriplets($patientIds: [String!]!) {
  patientIdsTriplets(patientIds: $patientIds) {
    CMO_ID
    DMP_ID
    PT_MRN
  }
}

query CohortsList(
  $where: CohortWhere
  $options: CohortOptions
  $hasCohortCompleteCohortCompletesOptions2: CohortCompleteOptions
) {
  cohortsConnection(where: $where) {
    totalCount
  }
  cohorts(where: $where, options: $options) {
    cohortId
    smileSampleIds
    totalSampleCount
    billed
    initialCohortDeliveryDate
    endUsers
    pmUsers
    projectTitle
    projectSubtitle
    status
    type
    hasCohortCompleteCohortCompletes(
      options: $hasCohortCompleteCohortCompletesOptions2
    ) {
      date
      endUsers
      pmUsers
      projectTitle
      projectSubtitle
      status
      type
    }
    hasCohortSampleSamplesConnection {
      totalCount
    }
    hasCohortSampleSamples {
      smileSampleId
      hasTempoTempos {
        smileTempoId
        billed
      }
    }
  }
}

query RequestsList(
  $options: RequestOptions
  $where: RequestWhere
  $requestsConnectionWhere2: RequestWhere
) {
  requestsConnection(where: $requestsConnectionWhere2) {
    totalCount
  }
  requests(where: $where, options: $options) {
    ...RequestParts
    hasSampleSamplesConnection {
      totalCount
    }
  }
}

query PatientsList(
  $options: PatientAliasOptions
  $where: PatientAliasWhere
  $patientAliasesConnectionWhere2: PatientAliasWhere
) {
  patientAliasesConnection(where: $patientAliasesConnectionWhere2) {
    totalCount
  }
  patientAliases(where: $where, options: $options) {
    namespace
    value
    isAliasPatients {
      smilePatientId
      hasSampleSamples {
        smileSampleId
        hasMetadataSampleMetadata {
          primaryId
        }
      }
      hasSampleSamplesConnection {
        totalCount
      }
      patientAliasesIsAlias {
        namespace
        value
      }
    }
  }
}

query RequestWithSamples(
  $options: RequestOptions
  $where: RequestWhere
  $hasSampleSamplesWhere2: SampleWhere
  $hasMetadataSampleMetadataWhere2: SampleMetadataWhere
  $hasSampleSamplesConnectionWhere2: RequestHasSampleSamplesConnectionWhere
  $hasMetadataSampleMetadataOptions2: SampleMetadataOptions
) {
  requests(where: $where, options: $options) {
    ...RequestParts
    hasSampleSamples(where: $hasSampleSamplesWhere2) {
      smileSampleId
      sampleCategory
      sampleClass
      datasource
      revisable
      hasMetadataSampleMetadata(
        where: $hasMetadataSampleMetadataWhere2
        options: $hasMetadataSampleMetadataOptions2
      ) {
        ...SampleMetadataParts
      }
      patientsHasSample {
        smilePatientId
        patientAliasesIsAlias {
          namespace
          value
        }
      }
    }
    hasSampleSamplesConnection(where: $hasSampleSamplesConnectionWhere2) {
      totalCount
    }
  }
}

query FindSamplesByInputValue(
  $where: SampleWhere
  $options: SampleMetadataOptions
  $patientAliasesIsAliasWhere2: PatientAliasWhere
) {
  samplesConnection(where: $where) {
    edges {
      node {
        ...SampleParts
        hasMetadataSampleMetadata(options: $options) {
          ...SampleMetadataParts
          hasStatusStatuses {
            validationReport
            validationStatus
          }
        }
        requestsHasSampleConnection {
          edges {
            node {
              ...RequestParts
            }
          }
        }
        patientsHasSampleConnection {
          edges {
            node {
              smilePatientId
              patientAliasesIsAlias(where: $patientAliasesIsAliasWhere2) {
                namespace
                value
              }
            }
          }
        }
      }
    }
  }
}

fragment RequestParts on Request {
  igoRequestId
  igoProjectId
  genePanel
  dataAnalystName
  dataAnalystEmail
  dataAccessEmails
  bicAnalysis
  investigatorEmail
  investigatorName
  isCmoRequest
  labHeadEmail
  labHeadName
  libraryType
  otherContactEmails
  piEmail
  projectManagerName
  qcAccessEmails
  smileRequestId
}

fragment SampleParts on Sample {
  datasource
  revisable
  sampleCategory
  sampleClass
  smileSampleId
}

fragment SampleMetadataParts on SampleMetadata {
  additionalProperties
  baitSet
  cfDNA2dBarcode
  cmoInfoIgoId
  cmoPatientId
  cmoSampleIdFields
  cmoSampleName
  collectionYear
  genePanel
  igoComplete
  igoRequestId
  importDate
  investigatorSampleId
  libraries
  oncotreeCode
  preservation
  primaryId
  qcReports
  sampleClass
  sampleName
  sampleOrigin
  sampleType
  sex
  species
  tissueLocation
  tubeId
  tumorOrNormal
}

query Samples(
  $where: SampleWhere
  $hasMetadataSampleMetadataWhere2: SampleMetadataWhere
  $hasMetadataSampleMetadataOptions2: SampleMetadataOptions
) {
  samples(where: $where) {
    smileSampleId
    revisable
    sampleCategory
    sampleClass
    datasource
    hasMetadataSampleMetadata(
      where: $hasMetadataSampleMetadataWhere2
      options: $hasMetadataSampleMetadataOptions2
    ) {
      ...SampleMetadataParts
    }
  }
}

mutation UpdateSamples(
  $where: SampleWhere
  $update: SampleUpdateInput
  $connect: SampleConnectInput
) {
  updateSamples(where: $where, update: $update, connect: $connect) {
    samples {
      smileSampleId
      revisable
      datasource
      sampleCategory
      sampleClass
      hasMetadataSampleMetadata {
        ...SampleMetadataParts
      }
    }
  }
}

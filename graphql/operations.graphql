query RequestsList($options: RequestOptions, $where: RequestWhere) {
  requestsConnection(where: $where) {
    totalCount
  }
  requests(where: $where, options: $options) {
    ...RequestParts
    importDate
    totalSampleCount
    hasMetadataRequestMetadata {
      importDate
    }
    hasSampleSamplesConnection {
      totalCount
    }
  }
}

query PatientsList($options: PatientOptions, $where: PatientWhere) {
  patientsConnection(where: $where) {
    totalCount
  }
  patients(where: $where, options: $options) {
    smilePatientId
    cmoPatientId
    dmpPatientId
    totalSampleCount
    cmoSampleIds
    consentPartA
    consentPartC
    hasSampleSamples {
      smileSampleId
      hasMetadataSampleMetadata {
        primaryId
        cmoSampleName
        additionalProperties
        cmoPatientId
      }
    }
    hasSampleSamplesConnection {
      totalCount
    }
    patientAliasesIsAlias {
      namespace
      value
    }
  }
}

query DashboardSamples(
  $searchVals: [String!]
  $sampleContext: SampleContext
  $limit: Int!
) {
  dashboardSampleCount(searchVals: $searchVals, sampleContext: $sampleContext) {
    totalCount
  }
  dashboardSamples(
    searchVals: $searchVals
    sampleContext: $sampleContext
    limit: $limit
  ) {
    ...DashboardSampleParts
    ...DashboardSampleMetadataParts
    ...DashboardTempoParts
  }
}

fragment DashboardSampleParts on DashboardSample {
  # (s:Sample)
  smileSampleId
  revisable
}

fragment DashboardSampleMetadataParts on DashboardSample {
  # (s:Sample)-[:HAS_METADATA]->(sm:SampleMetadata)
  ## Root-level fields
  primaryId
  cmoSampleName
  importDate
  cmoPatientId
  investigatorSampleId
  sampleType
  species
  genePanel
  baitSet
  preservation
  tumorOrNormal
  sampleClass
  oncotreeCode
  collectionYear
  sampleOrigin
  tissueLocation
  sex
  ## Custom fields
  recipe
  ## (sm:SampleMetadata)-[:HAS_STATUS]->(s:Status)
  validationReport
  validationStatus

  # Oncotree API
  cancerType
  cancerTypeDetailed
}

fragment DashboardTempoParts on DashboardSample {
  # (s:Sample)-[:HAS_TEMPO]->(t:Tempo)
  ## Root-level fields
  billed
  costCenter
  billedBy
  custodianInformation
  accessLevel
  ## Custom fields
  initialPipelineRunDate
  embargoDate
  ## (t:Tempo)-[:HAS_EVENT]->(bc:BamComplete)
  bamCompleteDate
  bamCompleteStatus
  ## (t:Tempo)-[:HAS_EVENT]->(mc:MafComplete)
  mafCompleteDate
  mafCompleteNormalPrimaryId
  mafCompleteStatus
  ## (t:Tempo)-[:HAS_EVENT]->(qc:QcComplete)
  qcCompleteDate
  qcCompleteResult
  qcCompleteReason
  qcCompleteStatus
}

fragment RequestParts on Request {
  igoRequestId
  igoProjectId
  genePanel
  dataAnalystName
  dataAnalystEmail
  dataAccessEmails
  bicAnalysis
  investigatorEmail
  investigatorName
  isCmoRequest
  labHeadEmail
  labHeadName
  libraryType
  otherContactEmails
  piEmail
  projectManagerName
  qcAccessEmails
  smileRequestId
}

mutation UpdateDashboardSamples(
  $newDashboardSamples: [DashboardSampleInput!]!
) {
  updateDashboardSamples(newDashboardSamples: $newDashboardSamples) {
    ...DashboardSampleParts
    ...DashboardSampleMetadataParts
    ...DashboardTempoParts
  }
}

query GetPatientIdsTriplets($patientIds: [String!]!) {
  patientIdsTriplets(patientIds: $patientIds) {
    CMO_ID
    DMP_ID
    PT_MRN
  }
}

query CohortsList(
  $where: CohortWhere
  $options: CohortOptions
  $hasCohortCompleteCohortCompletesOptions2: CohortCompleteOptions
) {
  cohortsConnection(where: $where) {
    totalCount
  }
  cohorts(where: $where, options: $options) {
    cohortId
    smileSampleIds
    totalSampleCount
    billed
    initialCohortDeliveryDate
    endUsers
    pmUsers
    projectTitle
    projectSubtitle
    status
    type
    hasCohortCompleteCohortCompletes(
      options: $hasCohortCompleteCohortCompletesOptions2
    ) {
      date
      endUsers
      pmUsers
      projectTitle
      projectSubtitle
      status
      type
    }
    hasCohortSampleSamplesConnection {
      totalCount
    }
    hasCohortSampleSamples {
      smileSampleId
      hasTempoTempos {
        smileTempoId
        billed
      }
    }
  }
}
